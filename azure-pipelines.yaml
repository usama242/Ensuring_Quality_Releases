name: Azure Pipelines
variables:
  - group: quality
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: $(pool)
    steps:
      # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: $(knownHostsEntry)
        sshPublicKey: '$(myPubKey)'
        sshKeySecureFile: 'id_rsa'

    - task: DownloadSecureFile@1
      name: udacity_public_key
      displayName: 'Download Public Key'
      inputs:
        secureFile: 'id_rsa.pub'
        
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '1.3.0'

    - task: TerraformCLI@0
      displayName: 'Initialize Terraform'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
        backendServiceArm: $(serviceConnectionName)
        backendAzureRmResourceGroupName: $(resourceGroup)
        backendAzureRmStorageAccountName: $(storageAccountName)
        backendAzureRmContainerName: 'tstate'
        backendAzureRmKey: 'terraform.tfstate'

    - task: TerraformCLI@0
      displayName: 'Deploy Cloud Infrastructure'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(projectRoot)/terraform/environment/test'
        commandOptions: '-var "public_key_path=$(udacity_public_key.secureFilePath)"'
        environmentServiceNameAzureRM: $(serviceConnectionName)

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload FakeRestAPI Package'
      artifact: drop-fakerestapi

    # - publish: automatedtesting/selenium/functional_ui_test.py
    #   displayName: 'Upload UI Tests definition'
    #   artifact: drop-ui-tests

- stage: Deploy
  jobs:
  - deployment: DeployFakeRestAPI
    displayName: 'Deploy app to custom VM'
    pool:
      name: $(pool)
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureWebApp@1
              displayName: 'Deploy Azure Web App'
              inputs:
                azureSubscription: $(serviceConnectionName)
                appName: $(webAppName)
                appType: webApp
                package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip