name: Azure Pipelines
variables:
  - group: quality
stages:
- stage: Provision
  displayName: Provisioning infrastructure
  jobs: 
  - job: CreateResources
    continueOnError: false
    pool:
        name: $(pool)
    displayName: Create Resources
    steps:
    - checkout: self
    # Download SSH keys
    - task: DownloadSecureFile@1
      inputs:
        secureFile: 'id_rsa'

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Agent.TempDirectory)'
        Contents: id_rsa
        TargetFolder: '~/.ssh/'

    - task: DownloadSecureFile@1
      inputs:
        secureFile: 'id_rsa.pub'

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Agent.TempDirectory)'
        Contents: id_rsa.pub
        TargetFolder: '~/.ssh/'

    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion:  $(terraformVersion)
    - task: TerraformCLI@0
      displayName: 'Initialize Terraform'
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: $(serviceConnectionName)
        backendAzureRmResourceGroupName: $(resourceGroup)
        backendAzureRmStorageAccountName: $(storageAccountName)
        backendAzureRmContainerName: 'tstate'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory:  $(projectRoot)/terraform/
        Configuration directory*: '$(projectRoot)/terraform/'

    - task: TerraformCLI@0
      displayName: Terraform Apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(projectRoot)/terraform/'
        environmentServiceNameAzureRM: $(serviceConnectionName)

- stage: Build
  displayName: Build
  jobs:
  - job: Build
    pool: 
      name: $(pool)
    steps:
    - checkout: self
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload FakeRestAPI Package'
      artifact: drop-fakerestapi


- stage: Deploy
  jobs:
  - deployment: DeployFakeRestAPI
    displayName: 'Deploy app to custom VM'
    pool:
      name: $(pool)
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureWebApp@1
              displayName: 'Deploy Azure Web App'
              inputs:
                azureSubscription: $(serviceConnectionName)
                appName: $(webAppName)
                appType: webApp
                package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip